[name]
database_name = coffee

[user]
user_sql = GRANT all on coffee.* TO 'user_coffee'@'localhost' IDENTIFIED BY 'rootroot'

[sql]
mode = create table user_mode(
    no int AUTO_INCREMENT,
    mode varchar(20) not null unique,
    primary key (no))

grant = create table mode_grant(
    no int AUTO_INCREMENT,
    name varchar(20),
    user_grant varchar(20),
    primary key (no),
    foreign key (name) references user_mode(mode))


user_data = create table user_data(
    user_id varchar(20) not null,
    pass char(41) not null,
    mode varchar(20) not null,
    name varchar(20) not null,
    email varchar(100),
    primary key (user_id),
    foreign key (mode) references user_mode(mode))

category = create table category(
    no int,
    name varchar(11) unique,
    primary key (no))

product = create table product(
    code char(4) not null,
    name varchar(20) not null,
    category int,
    price int,
    margin_rate int,
    primary key (code),
    foreign key (category) references category(no))

sale = create table sale(
    no int auto_increment,
    code char(4),
    saleCnt int not null,
    date TIMESTAMP DEFAULT NOW(),
    primary key(no),
    foreign key(code) references product(code))

sale_detail = create table sale_detail(
    no int not null,
    sale_price int not null,
    addTax int not null,
    supply_price int not null,
    margin_Price int not null,
    foreign key(no) references sale(no)
    on delete cascade)

tri_sale_after_insert_detail =
    create trigger tri_sale_insert_after_detail
    after insert on sale
    for each row
    begin
        set @saleprice = (select price from product where code = new.code) * new.salecnt,	@addtax = ceil(@saleprice/11),
        @supprice = @saleprice - @addtax,
        @marprice = round(@supprice * ((select price margin_rate from product where code = new.code)/100));
        insert into sale_detail(no, sale_price, addtax, supply_price, margin_price)
        values(new.no, @saleprice, @addtax, @supprice, @marprice);
    end

tri_user_data_after_insert_sale =
    create trigger tri_user_data_after_insert_sale
    after insert on product
    for each row
    begin
        insert into sale(code, salecnt, date) values(new.code, 0, default);
    end

tri_sale_after_update_detail =
    create trigger tri_sale_after_update_detail
    after update on sale
    for each row
    begin
        set @saleprice = (select price from product where code = new.code) * new.salecnt,
        @addtax = ceil(@saleprice/11),
        @supprice = @saleprice - @addtax,
        @marprice = round(@supprice * ((select margin_rate from product where code = new.code)/100));

        update coffee.sale_detail
        set sale_price=@saleprice, addtax=@addtax, supply_price=@supprice, margin_price=@marprice
        where no = new.no;
    end

mode_add = insert into user_mode(mode) values('admin'),('user'),('guest')

grant_add = insert into mode_grant(name, user_grant) values
    ('admin','view'),('admin','sale'),('admin','manage_pro'),('admin','manage_user'),('admin','system'), ('user','view'),('user','sale'), ('guest','view')

user_add = insert into user_data values
    ('admin', password('rootroot'), 'admin','admin','admin@gmail.com'),('a', password('a'), 'user','a','a@naver.com'),('b', password('b'), 'guest','b','b.daum.net')

category_add = insert into category values
    (1,'coffee'),(2,'drink'),(3,'snack')

pro_add = insert into product VALUES
    ('A001','아메리카노',1,4500,10),('A002','카푸치노',1,3800,15),('A003','헤이즐넛',1,5000,12),('A004','에스프레소',1,3500,10),('B001','딸기쉐이크',2,5200,12),('B002','후르츠와인',2,4300,11),('B003','팥빙수',3,6000,12),('B004','아이스초코',2,4000,15)

proc_saledetail_orderby =
    create procedure proc_saledetail_orderby(in issaleprice boolean)
    BEGIN
        if issaleprice then
            select s3.rank, s3.code, s3.name, s3.price, s3.saleCnt, s3.sale_price, s3.addTax, s3.supply_price, p.margin_rate, s3.margin_price
            from (select (select count(*)+1 from sale_detail s2 where s2.sale_price > s1.sale_price) rank, sale.code code, p.name name, price, saleCnt, sale_price, addTax, supply_price, marginRate, margin_price
            from sale inner join sale_detail s1 on sale.no = s1.no join product p on sale.code = p.code
            order by rank) s3
            UNION
            select '합계', '-', '-', sum(s4.price), sum(s4.salecnt), sum(s4.sale_price), sum(s4.addTax), sum(s4.supply_price), '-', sum(s4.margin_price)
            from (select price, saleCnt, sale_price, addTax, supply_price, margin_price
            from sale inner join sale_detail s1 on sale.no = s1.no join product p on sale.code = p.code) s4;
        else
            select s3.rank, s3.code, s3.name, s3.price, s3.saleCnt, s3.sale_price, s3.addTax, s3.supply_price, p.margin_rate, s3.margin_price
            from (select (select count(*)+1 from sale_detail s2 where s2.margin_price > s1.margin_price) rank, sale.code code, p.name name, price, saleCnt, sale_price, addTax, supply_price, marginRate, margin_price
            from sale inner join sale_detail s1 on sale.no = s1.no join product p on sale.code = p.code
            order by rank) s3
            UNION
            select '합계', '-', '-', sum(s4.price), sum(s4.salecnt), sum(s4.sale_price), sum(s4.addTax), sum(s4.supply_price), '-', sum(s4.margin_price)
            from (select price, saleCnt, sale_price, addTax, supply_price, margin_price
            from sale inner join sale_detail s1 on sale.no = s1.no join product p on sale.code = p.code) s4;
         end if;
    end
